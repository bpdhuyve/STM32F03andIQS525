===============================================================================================
Questions
===============================================================================================

1. Decoupling caps to improve high power RF noise? --> possiblu not necessary

2. Need multitouch gestures?  --> working

3. IQS525 using the PC tool with the CT210A configuration tool?   -- solved --> connect following pins and open PC tool:

			
			IQS5525         flatcable       proxsense module CT210A
			___________                _____________________
			|         |                |                     |
			| 8    RDY|----------------|DIGITAL PIN 2        |
			| 2    SDA|----------------|SDA                  |
			| 3    SCL|----------------|SCL                  |
			| 4  VDDHI|----------------|3v3                  |
			| 5    GND|----------------|GND                  |                                                
			-----------                -----------------------
			

4. Debugging fails when going step by step -- solved --> disable watchdog
5. I2C not working on new firmware -- solved --> new firmware used I2C fast mode --> change this in the code

6. IQS525 firmware upgrading via? --> solved:


								   IQS525 pins
			----------------------------------------------------				   
			| 27 (PGM)		7 (NRST)		4 (VHDI)	5 (GND)|
			----------------------------------------------------
				|			|			|				|
			    |			|			|				|
				------------------------------------------
				|18			17			3				1|
				------------------------------------------
								CT210A pins
								
								
								
===============================================================================================
Websites
===============================================================================================

1. i2c explanation: https://robot-electronics.co.uk/i2c-tutorial
2. i2c explanation: https://www.youtube.com/watch?v=XS2-90IJ7kc
3. IQS5XX datasheet https://www.azoteq.com/images/stories/pdf/iqs5xx-b000_trackpad_datasheet.pdf  (after update B000 firmware on the chip now!)
4. STM32F030C6T6 datasheet: https://eu.mouser.com/datasheet/2/389/stm32f030f4-956260.pdf
5. repeated start:  https://community.hologram.io/t/i2c-repeated-start-issue/953
6. IQS5xx I2C Bootloader v2.x Technical User Guide v0.05
7. IQS5xx-B000 Arduino Bootloader Example Description v1.1
8. Website all about I2C: https://www.i2c-bus.org
9. 


===============================================================================================
Steps in work
===============================================================================================

0. Reading
	0.1 Read datasheets of IQS525, ST microcontroller, etc.
	
1. Debug board 
	1.1 Solder wires to SDA, SCL
	1.2 Check SDA, SCL signals using logic analyzer
	1.3 Try writing and reading from register - writing works, reading not - unability to specify
	register address
	
2. Start writing new code
	2.1 Examine I2C code and start writing new functions (in BitBang) for reading and writing, according to 
	format expected by the IQS525
	2.2 Problem: Every first I2C operation worksÂ¸but the second one always fails for some reason (first byte is sent correctly, but slave responds with NACK
		- Problem already present in first version of code
		- Not problem with buffer size - buffer is large enough
		- Probably not problem with start, that seems fine - still investigate this further
			
		- Most likely: stop condition in this version of the microcontroller is different
			- seems not to be the problem
			
		- Solution: No longer use BitBang, but switch to provided i2C libraries -  
			- found out later that reason was the i2c sleep: 
				The device can be woken from suspend by addressing it on the I2C bus.  
				It will respond with a not-acknowledge (NACK) on the first addressing attempt and with an acknowledge (ACK) on the second 
				addressing attempt, providing that there was at least a time difference of ~150us between the two  addressing attempts.
			- still check now if we can write a value to a register and than read back from it
			
			
	2.3 Reading and writing values to registers
		- noticed that leds introduce delays in i2c transmissions, but it is not problematic
		- Reading a value after writing now works. Read with repeated start as shown on p.27 of IQS525 datasheet
		- Started testing with changing parameters 
			- Nothing seems to change when adapting parameter values; need to investigate
			- Seems like firmware installed on the device is not B000 as was expected from beginning, but A000! --> so need to use datasheet for A000 firmware!
			- Addressing in A000 firmware is one byte instead of two byte!
			- Wrote a few new functions to cope with the new addressing scheme on the A000 firmware
			- Trying to read XY-data from the board --> works, xy-axis clearly come out (high values in certain areas, lower in other), not very accurate though.
			
	2.4 Finding the right parameters for the touch display
		- Seems that the PC software for configuration doesn't work with the old A000 firmware
		- Explore options: find compatible PC software / find a way to update firmware
			- sent email to azoteq
		- recommendation is to update to new firmware - having a problem updating firmware however
		- finally after help from azoteq managed to flash new firmware onto ship
		- flashed firmware onto evaluation kit as well
		- started fiddling with the parameters and finding the best combination of values
		
	2.5 Getting everything to work with new firmware
		- uses 16-bit addressing (memory map address) and the communication windows is no longer ended with a "I2C-STOP", but with a stop byte to address 0xEEEE,
		also, configuration of the different parameters is now different and to other registers
			--> Adapt code for all these things
		- Problem: something seems to go wrong in the I2C, random bit errors occur
			- more precisely: SCL keeps fluctuating randomly in time periods where it should be in fact idle
			- found reason and solved: new firmware uses i2c fast mode by default, but stm uC was still on normal mode. From 
			the moment the bus was enabled the two clashed and the IQS525 went into a error mode.
		- I2C communication now works --> reading out eg. ATI ALP target outputs 500, which is expected according to datasheet
		
		- New problem: although I2C communication works, reading out the registers that contain	the x and y values only outputs 0x0000, even though the display is touched
			- Tried soldering wires to connect the IQS525 directly to the CT 210A configuration tool --> the touch display works, touch is visualized in the PC tool, so this is not the problem
			- Problem might be wrong setup. Because the PC tool programs the IQS525 when connecting power, the program runs fine and touch works, but when not connecting the PC tool the configuration is wrong
			- Will try to sniff setup that is send via i2c when using the PC tool	
				--> strange: no setup is being done, probably values are saved somewhere on the chip flash.
			- Reading out register containing setup data, just after power up, indeed reveals values are already present.. 	
				- Does not explain why reading out XY data doesn't work (only works when using PC-tool directly connected to IQS525)...
			- Might be that one of the reset registers is turned on (maybe preventing the touchpad to start sensing)
				--> not the case (tried setting bit 7, ack_reset, of System Control 0, but did not make a difference)
			- In the Example arduino code there is a wait till RDY gets high (data is then ready), however the current implementation
			with polling should work fine, waiting for RDY is not mandatory according to the datasheet.
				
			
			



VALUES:
	
	// NOTE: refer to AppTouch.c, ApptouchSettings(), for explanation short explanation of values
	
	- system control 0  (0x0431):  0x00
	- system control 1  (0x0432):  0x00
	
	- system config 0 (0x058E): 0x6C
	- system config 1 (0x058F): 0x24
	
	
	- Prox threshold for trackpad (0x0594): 24 (dec)    									- 
	- Prox threshold for ALP channel (0x0595): 8 (dec)										
	
	- Touch Threshold set: 20 (dec)												-
	- Touch Threshold clear: 14 (dec)
	- Snap Threshold: not used in this implementation, so doesn't matter
	
	- ATI Target for trackpad: 500 (default)
	- ATI Target ALP channel: 500 (default)
	
	- ATI C global for trackpad: 4 (dec)
	- ATI C ALP channel: 18 (dec)
	
	- reATI Retry Time: 7s (causes issues when lower) (dec)
	
	- Turned on Palm rejection (see ref. manual section 5.5)
		- Plam rejection threshold: 30 (lower rejects finger sometimes)
		- Palm Rejection Timeout: 15 periods (= 480ms) (default)
	
	- Manual mode is turned off (would need to select modes manually, eg. Deep sleep, active mode, etc.)
	
	
Read out some registers for sanity check:
	- 0x063D Total Rx: 0x05
	- 0x063E Total Tx: 0x05
	- System Info 0 (0x000F): 0x82
	- System Info 1 (0x0010): 0x08
	- XY static beta  :(0x0633) : 0x80
	- Minimum count Re-ATI delta: (0x062E): 0x1E
	--> Is all as expected
	
	
	

// REad out 0x58E (syst config 0) via pc tool and while debugging --> different!
//reset...
// U8 systemcontrol01 = {0x04,0x31,0xB8,0x00}
//DrvI2cMasterDevice_ReadData_specificSlaveRegister(i2c_device_id, data_buffer, 10, TRUE, 0x0011}
	